name: Build and Release
on: 
  push:
    branches:
      - master

jobs:
  check-tag:
    name: Check Tag and Version
    runs-on: ubuntu-latest
    outputs:
      newbuild: ${{ steps.check-result.outputs.newbuild }}
      newtag: ${{ steps.check-result.outputs.newtag }}
    steps:
    - name: Wait on check
      uses: lewagon/wait-on-check-action@v1.3.4
      with:
        ref: ${{ github.ref }}
        check-name: 'ESLint Check'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        wait-interval: 30
    - name: Checkout code
      uses: actions/checkout@v4.1.1
      with:
        fetch-depth: 0
    - name: Get latest tag
      id: previous-tag
      uses: WyriHaximus/github-action-get-previous-tag@v1.4.0
    - name: Get project version
      id: project-version
      uses: euberdeveloper/ga-project-version@v3.0.0
      with:
        package-manager: npm
    - name: Get versions
      run: |
        echo "oldtag_string=${{ steps.previous-tag.outputs.tag }}" >> $GITHUB_ENV
        echo "newtag_string=${{ format('v{0}', steps.project-version.outputs.version) }}" >> $GITHUB_ENV
    - name: Compare versions
      run: |
        echo "newbuild=${{ env.oldtag_string != env.newtag_string }}" >> $GITHUB_ENV
    - name: Set check result
      id: check-result
      run: |
        echo "Latest tag: ${{ env.oldtag_string }}"
        echo "Project version (prepended with v): ${{ env.newtag_string }}"
        echo "Generate new release: ${{ env.newbuild }}"
        echo "newbuild=${{ env.newbuild }}" >> $GITHUB_OUTPUT
        echo "newtag=${{ env.newtag_string }}" >> $GITHUB_OUTPUT

  build-release:
    name: Build and Release ${{ matrix.os }}-${{ matrix.architecture }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        architecture: [x86, x64]
        include:
          - os: windows-latest
            architecture: x86
            is-linux: false
          - os: windows-latest
            architecture: x64
            is-linux: false
          - os: ubuntu-latest
            architecture: x64
            is-linux: true

    permissions:
      contents: write
    needs: check-tag
    if: ${{ needs.check-tag.outputs.newbuild == 'true' }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.1.1

    - name: Set up NASM
      if: ${{ matrix.architecture == 'x86' && ! matrix.is-linux }}
      uses: ilammy/setup-nasm@v1.5.1
    - name: Setup scoop
      if: ${{ matrix.architecture == 'x86' && ! matrix.is-linux }}
      uses: MinoruSekine/setup-scoop@v3
    - name: Install patch
      if: ${{ matrix.architecture == 'x86' && ! matrix.is-linux }}
      run: scoop install patch

    - name: Setup Node.js
      uses: actions/setup-node@v4.0.2
      with:
        node-version-file: '.nvmrc'
    - name: Setup Python
      uses: actions/setup-python@v5.1.0
      with:
        python-version-file: '.python-version'
        architecture: ${{ matrix.architecture }}
    - name: Install npm modules
      run: npm ci
    - name: Install pip modules
      run: npm run pipsetup

    - name: Build release artifact ${{ matrix.architecture }}
      if: ${{ ! matrix.is-linux }}
      run: npm run distpackage-${{ matrix.architecture }}
    - name: Build release artifact linux
      if: ${{ matrix.is-linux }}
      run: npm run distpackagelinux-${{ matrix.architecture }}

    - name: Create release
      uses: softprops/action-gh-release@v2.0.4
      with: 
        token: "${{ secrets.GITHUB_TOKEN }}"
        tag_name: ${{ needs.check-tag.outputs.newtag }}
        prerelease: true
        generate_release_notes: true
        files: dist/*
